---
import MobileMenu from './ui/MobileMenu.astro';
import DesktopMenu from './ui/DesktopMenu.astro';
---

<header class="fixed top-0 z-50 flex h-24 w-full select-none justify-center duration-300 xl:top-4">
  <DesktopMenu />
  <MobileMenu />
</header>

<div data-target class="absolute top-[100px]"></div>

<script>
  const target = document.querySelector('[data-target]') as HTMLDivElement | null;
  const navBar = document.querySelector('#desktop-menu') as HTMLElement | null;
  const btnToggle = document.querySelector('#btn-menu') as HTMLButtonElement | null;
  const mobileMenu = document.querySelector('#mobile-menu') as HTMLElement | null;
  const mobileMenuLinks = mobileMenu?.querySelectorAll(
    'ul li a',
  ) as NodeListOf<HTMLAnchorElement> | null;

  const handleIntersection = ([entry]: IntersectionObserverEntry[]) => {
    if (!entry.isIntersecting) {
      navBar?.classList.remove('md:backdrop-blur-none', 'md:bg-transparent', 'md:shadow-none');
    } else {
      navBar?.classList.add('md:backdrop-blur-none', 'md:bg-transparent', 'md:shadow-none');
    }
  };

  const createObserver = (target: Element, callback: IntersectionObserverCallback) => {
    const observer = new IntersectionObserver(callback, { threshold: 0.5 });
    observer.observe(target);
    return () => observer.disconnect();
  };

  let cleanupObserver: (() => void) | null = null;

  if (target) {
    cleanupObserver = createObserver(target, handleIntersection);
  }

  btnToggle?.addEventListener('click', () => {
    const isOpen = btnToggle?.classList.toggle('open');
    btnToggle?.setAttribute('aria-expanded', `${isOpen}`);

    if (isOpen) {
      mobileMenu?.classList.add('w-full', 'sm:w-1/2');
      mobileMenu?.setAttribute('aria-hidden', 'true');
    } else {
      mobileMenu?.classList.remove('w-full', 'sm:w-1/2');
      mobileMenu?.setAttribute('aria-hidden', 'false');
    }
  });

  mobileMenuLinks?.forEach((link) => {
    link.addEventListener('click', () => {
      mobileMenu?.classList.remove('w-full', 'sm:w-1/2');
      mobileMenu?.setAttribute('aria-hidden', 'true');
      btnToggle?.classList.remove('open');
      btnToggle?.setAttribute('aria-expanded', 'false');
    });
  });

  window.addEventListener('beforeunload', () => {
    cleanupObserver?.();
  });
</script>
